<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Runtime | Handy's]]></title>
  <link href="http://blog.handy.wang/blog/categories/runtime/atom.xml" rel="self"/>
  <link href="http://blog.handy.wang/"/>
  <updated>2016-05-22T14:58:57+08:00</updated>
  <id>http://blog.handy.wang/</id>
  <author>
    <name><![CDATA[Handy.Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UIView与CALayer中动画的创建和执行过程]]></title>
    <link href="http://blog.handy.wang/blog/2015/10/11/uiviewyu-calayerzhong-dong-hua-de-chuang-jian-he-zhi-xing-guo-cheng/"/>
    <updated>2015-10-11T22:49:40+08:00</updated>
    <id>http://blog.handy.wang/blog/2015/10/11/uiviewyu-calayerzhong-dong-hua-de-chuang-jian-he-zhi-xing-guo-cheng</id>
    <content type="html"><![CDATA[<!--more-->


<h2>写在最前面</h2>

<p>本文假设您已有RunLoop和CAAnimation的相关知识，所以这里不对<a href="http://blog.handy.wang/blog/2014/05/26/runloopxue-xi-bi-ji-1/">RunLoop</a>和CAAnimation的细节进行介绍。但是，这里仍然要提前提及几个知识点：CFRunLoopActivity、CAAction、CAAnimation、CATransaction</p>

<p><strong>RunLoop的6个CFRunLoopActivity</strong></p>

<pre><code>typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) {
    kCFRunLoopEntry = (1UL &lt;&lt; 0),//即将进入RunLoop
    kCFRunLoopBeforeTimers = (1UL &lt;&lt; 1),//Timer即将触发
    kCFRunLoopBeforeSources = (1UL &lt;&lt; 2),//Source0即将触发
    kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5),//RunLoop即将休眠
    kCFRunLoopAfterWaiting = (1UL &lt;&lt; 6),//RunLoop已被唤醒
    kCFRunLoopExit = (1UL &lt;&lt; 7),//RunLoop已结束
    kCFRunLoopAllActivities = 0x0FFFFFFFU
};
</code></pre>

<p><strong>CAAction</strong>
CAAction即动画行为，它是一个protocol(CAAnimation实现了此protocol)，即定义一个动画要做的事情。比如，我们平时无论是否在Animaiton block里修改View的属性时，都会触发Core Animation回调CALayer，再回调UIView来获取CAAction(如：CABasicAnimation)，如果不在Animaiton block里修改View的属性时获取到的是[NSNull null]，在Animaiton block里修改View的属性时获取到的是CABasicAnimation等(后面有图标这个过程)，也可以返回自定义的动画(实现了CAAction的动画)。</p>

<p><strong>CAAnimation的继承结构</strong></p>

<p><img src="https://raw.githubusercontent.com/Handy-Wang/Handy-Wang.github.io/source/source/_posts/img/uiview_calayer_animation_creation_caanimation_hierarchy.jpg" alt="CAAnimation.jpg" /></p>

<p><strong>CATransaction</strong>
CATransacton是一个与动画相关的概念，它负责把多个对Layer或View的可动画属性的修改集中在一起一次性提交并执行，所以Animation应该需要被包含在CATransaction中的。CATransaction分为<strong>隐式</strong>和<strong>显示</strong>。
如下，这就是一个<strong>显示的CATransaction</strong>代码片断，即由开发人员来begin和commit。</p>

<pre><code>[CATransaction begin];
[CATransaction setValue:@(NO) forKey:kCATransactionDisableActions];
[CATransaction setValue:@(0.5) forKey:kCATransactionAnimationDuration];
[CATransaction setValue:^() {NSLog(@"Completion...");} forKey:kCATransactionCompletionBlock];
_animLayer.position = CGPointMake(_animLayer.position.x, _animLayer.position.y - 10);
[CATransaction commit];
</code></pre>

<p>从代码片断中可见虽然只是修改了layer的position，但是最终动画的duration、动画回调都可能通过CATransaction来提供。当不是简单的修改position，而是给layer加一个CAAnimation时，最终动画的duration等参数则是以CAAnimation的内容为主。同时，CATransaction支持嵌套，以最外层commit为准。这里还需要关注一下对kCATransactionDisableActions的修改，kCATransactionDisableActions表示是否禁用CAAction的检索：若为YES则禁用，即无论在动画代码块里的UI属性修改都不会有动画效果，actionForKey:方法不会回调；若为NO则开启CAAction的检索。</p>

<p>关于<strong>隐式的CATransaction</strong>，有<a href="http://blog.csdn.net/yaozhuoyu/article/details/9533909">资料</a>说是</p>

<pre><code>在大多数情况下，我们并不需要去创建自己的transaction。
当我们给layer添加一个显式或者隐式的动画的时候，core animation会自动的为我们创建一个隐式的
transaction。
</code></pre>

<p>也有<a href="http://geeklu.com/2012/09/animation-in-ios/">资料</a>说是</p>

<pre><code>CATransaction也分两类,显式的和隐式的,当在某次RunLoop中设置一个animatable属性的时候,
如果发现当前没有事务,则会自动创建一个CA事务
</code></pre>

<p>但是，无论通过修改Layer的position属性来达到隐式动画效果时，还是通过修改View的center属性达到显式动画效果时断点+[CATransaction begin]、CA::Transaction::create()方法都没有被调用，说明没有新创建CATransaction.</p>

<pre><code>隐式动画
_animLayer.position = CGPointMake(_animLayer.position.x, _animLayer.position.y - 10);

显式动画
[UIView animateWithDuration:0.5 animations:^{
    _animView.center = CGPointMake(_animView.center.x, _animView.center.y - 10);
}];
</code></pre>

<p>但是前面我们提到Animation是要依附于CATransaction的commit才得以执行的，而且我们在实验隐式动画和显式动画时，当CAAction被查找(后面会图示)完成后CA::Transaction:commit会被调用到，所以RunLoop回调进行创建动画的过程时应该事先已创建了一个根Transaction，再次通过断点CA::Transaction::create方法也证明了Main RunLoop通过回调<strong><strong>CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION</strong></strong>只调用了一次CA::Transaction::create方法来创建了一个根Transaction，所以这就能解释能为什么隐式动画和显式动画时Core Animation内部没有新创建CATransaction而只是在动画CAAction返回后调用CA::Transaction:commit就可以执行动画了。所以，我理解的隐式CATransaction是指前面提到的根Transaction。</p>

<h2>正文</h2>

<p>在了解了以上知识后，我才会告诉你，本文主要是介绍我们在UIView或CALayer中通过动画块或不通过动画块来修改其属性时的动画创建和执行过程。先看一段代码，如下：</p>

<pre><code>代码一：隐式动画
_animLayer = [IDCAAnimationTestLayer new];
_animLayer.position = CGPointMake(_animLayer.position.x, _animLayer.position.y - 10);

代码二：无动画效果
_animView.layer.position = CGPointMake(_animView.layer.position.x, _animView.layer.position.y - 10);

代码三：无动画效果
[CATransaction begin];
[CATransaction setValue:@(NO) forKey:kCATransactionDisableActions];
[CATransaction setValue:@(0.5) forKey:kCATransactionAnimationDuration];
_animView.layer.position = CGPointMake(_animView.layer.position.x, _animView.layer.position.y - 10);
[CATransaction commit];

代码四：显式动画
[UIView animateWithDuration:0.5 animations:^{
    _animView.center = CGPointMake(_animView.center.x, _animView.center.y - 10);
}];

代码五：无动画效果
_animView.center = CGPointMake(_animView.center.x, _animView.center.y - 10);
</code></pre>

<p>从以上代码中可以看到：为什么同样是对CALayer或UIView的相同属性作修改，而有些有动画而有些没有动画呢？带着这个疑问，我们接下来看下面这张图。</p>

<p><img src="https://raw.githubusercontent.com/Handy-Wang/Handy-Wang.github.io/source/source/_posts/img/uiview_calayer_animation_creation_callprocess.jpg" alt="E_UIView:CALayer的动画创建及执行过程.jpg" />
如上图，我来分别梳理一个修改CALayer和UIView属性时的动画创建过程(没错，其实不在动画块里修改属性也有动画创建过程存在的)。</p>

<h5>CALayer的动画创建和执行过程(如图中黑实线箭头及序号)</h5>

<ol>
<li>RunLoop触发两类回调事件：BeforeWaiting、点击事件、ExitRunLoop</li>
<li>RunLoop回调事件回调到开发人员写的修改CALayer属性的代码</li>
<li>当修改CALayer的animatable属性时会触发CALayer自己的actionForKey:方法来查找相应的CAAction，CALayer的actionForKey方法的默认实现会返回一个实现了CAAction protocol的CAAnimation，如CABasicAnimation</li>
<li>开发人员的修改CALayer属性的代码执行完毕后，在RunLoop的回调函数的后续逻辑会调用CA::Transaction:commit()来提交之前修改CALayer属性而生成的CAAction.</li>
<li>最后相应的动画效果显示到屏幕上(TODO:这里的细节还有待调研)</li>
</ol>


<h5>UIView的动画创建和执行过程(如图中虚线箭头及序号)</h5>

<ol>
<li>RunLoop触发两类回调事件：BeforeWaiting、点击事件、ExitRunLoop</li>
<li>RunLoop回调事件回调到开发人员写的修改UIView几何或透明度等UI属性的代码，这里修改有两种情况如下：
2.1.1 不在动画代码块里修改UIView属性：修改UIView的几何、透明度等UI属性实际上最终是通过CALayer的对应属性修改来体现的，如修改UIView的center实际上最终是通过CALayer的position来体现的。
2.1.2 在动画代码块里修改UIView属性
2.2 如2.1.1所说，无论是否在动画代码块里修改UIView的几何、透明度等UI属性，实际上是通过CALayer修改对应属性来完成的，这是因为UIView与CALayer的关系是平行的，且UIView是CALayer的Delegate。</li>
<li>与<strong>CALayer的动画创建和执行过程</strong>的流程一致。但是需要注意的是：如果是2.1.1触发这一步，那么返回的是[NSNull null]，即没有动画(表示停止对CAAction的检索)；如果是2.1.2触发这一步，那么返回的结果与<strong>CALayer的动画创建和执行过程</strong>第3步一样，即实现了CAAction protocol的CAAnimation子类。从这两种情况我们就不难明白，为什么不在动画代码块里修改UIView的UI属性没有动画，反之有动画，这都是由actionForKey:是否有确切的CAAction值决定的。顺带讲一下，actionForKey:有三种返回值情况：id<CAAction>、nil，nil表示没有没有任何动画行为。</li>
<li>同<strong>CALayer的动画创建和执行过程</strong></li>
<li>同<strong>CALayer的动画创建和执行过程</strong></li>
</ol>


<p>讲到这里，我再来回顾前面的问题<strong>“为什么同样是对CALayer或UIView的相同属性作修改，而有些有动画而有些没有动画呢？”</strong>，再来看一下代码并作相应解释：</p>

<pre><code>代码一：隐式动画
_animLayer = [IDCAAnimationTestLayer new];
_animLayer.position = CGPointMake(_animLayer.position.x, _animLayer.position.y - 10);
解释：这里首先解释一个名词叫Root Layer和非Root Layer。很简单，Root Layer就是指有对应UIView的Layer，
非Root Layer就是指没有对应UIView的Layer，在CALayer里只有对非Root Layer的UI属性修改才会有隐式动画效果。
其实，不难理解，因为Root Layer有UIView，且修改UI属性的代码没有写到动画代码块里，
所以CAAction的返回被UIView的actionForLayer:forKey:方法返回为[Null null]，进一步回调到CALayer里actionForKey:的返回值为nil。
但是，如果在动画代码块里修改Root Layer的UI属性是会有动画效果的。
显然，_animLayer是一个非Root Layer，修改position属性后会按照上面的“CALayer的动画创建和执行过程”来执行，所以有动画效果。

代码二：无动画效果
_animView.layer.position = CGPointMake(_animView.layer.position.x, _animView.layer.position.y - 10);
解释：显然_animView.layer是一个Root Layer，而且没有写在动画代码块里，所以不会有隐式动画。

代码三：无动画效果
[CATransaction begin];
[CATransaction setValue:@(NO) forKey:kCATransactionDisableActions];
[CATransaction setValue:@(0.5) forKey:kCATransactionAnimationDuration];
_animView.layer.position = CGPointMake(_animView.layer.position.x, _animView.layer.position.y - 10);
[CATransaction commit];
解释：同**代码二**

代码四：显式动画
[UIView animateWithDuration:0.5 animations:^{
    _animView.center = CGPointMake(_animView.center.x, _animView.center.y - 10);
}];
解释：参见**UIView的动画创建和执行过程**及其中的2.1.2点，所以有动画效果。

代码五：无动画效果
_animView.center = CGPointMake(_animView.center.x, _animView.center.y - 10);
解释：参见**UIView的动画创建和执行过程**及其中的2.1.1点，所以没有动画效果。
</code></pre>

<p>以上内容就是本章的全部内容，欢迎邮件到nnnwjs@126.com讨论。</p>

<h2>参考</h2>

<ul>
<li><a href="http://blog.handy.wang/blog/2014/05/26/runloopxue-xi-bi-ji-1/">RunLoop学习笔记(一) 基本原理介绍</a></li>
<li><a href="http://blog.csdn.net/yaozhuoyu/article/details/9533909">Core Animation 高级动画技巧</a></li>
<li><a href="http://geeklu.com/2012/09/animation-in-ios/">谈谈iOS Animation</a></li>
<li><a href="http://www.jianshu.com/p/8c1c1697c0ce">iOS开发基础知识：Core Animation(核心动画)</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=400417748&amp;idx=1&amp;sn=0c5f6747dd192c5a0eea32bb4650c160&amp;scene=4#wechat_redirect">iOS 事件处理机制与图像渲染过程</a></li>
<li>参考以上资料的过程一定要做实验</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIView与CALayer协作渲染界面的过程]]></title>
    <link href="http://blog.handy.wang/blog/2015/10/03/uiviewyu-calayerxie-zuo-xuan-ran-jie-mian-de-guo-cheng/"/>
    <updated>2015-10-03T01:38:49+08:00</updated>
    <id>http://blog.handy.wang/blog/2015/10/03/uiviewyu-calayerxie-zuo-xuan-ran-jie-mian-de-guo-cheng</id>
    <content type="html"><![CDATA[<!--more-->


<h2>预热</h2>

<p>在聊这个话题前，我先简单的说说与本文相关的几个iOS核心Framework及它们之间的关系：UIKit Framework、QuartzCore Framework(CoreAnimation)、CoreGraphics Framework.</p>

<p>另外，为了能更好的理解本文要讲解的逻辑机制，建议先熟悉一下RunLoop机制，我<a href="http://blog.handy.wang/blog/2014/05/26/runloopxue-xi-bi-ji-1/">在这里</a>有作讲解。</p>

<p><strong>注意1</strong>：可以看到上面提到的技术点中的CoreAnimation没有叫 <del>CoreAnimation Framework</del> 。为什么呢？因为CoreAnimation不是被单独地打包到一个Framework里的，而是属于QuartzCore Framework的一部分，奇怪的是QuartzCore.h里只引用了CoreAnimation.h。</p>

<pre><code>  /* QuartzCore.h
   Copyright (c) 2004-2015, Apple Inc.
   All rights reserved. */

#ifndef QUARTZCORE_H
#define QUARTZCORE_H

#include &lt;QuartzCore/CoreAnimation.h&gt;

#endif /* QUARTZCORE_H */
</code></pre>

<p><strong>注意2</strong>：提前了解这几个Framework非常重要，可以辅助我们理解它们各自的职责，以便进一步理解后面会讲解的UIView与CALayer的协作时为什么不同的协作点是相应Framework来参与。</p>

<p><img src="https://raw.githubusercontent.com/Handy-Wang/Handy-Wang.github.io/source/source/_posts/img/UIKit-QuarzCore-CoreGraphics-relations.jpg" title="UIKit|QuarzCore|CoreGraphics关系图" alt="UIKit|QuarzCore|CoreGraphics关系图" /></p>

<ul>
<li><p><strong>UIKit Framework</strong>
正如Apple官方文档对<a href="http://www.baidu.com">UIKit Framework</a>的介绍，它主要提供了：界面呈现能力、事件响应能力、驱动RunLoop运行和与系统内核通信的数据。简单来说就是：主要负责界面展示、事件响应以及RunLoop运转动力。<em>UIView当然是属于UIKit Framework</em>。</p></li>
<li><p><strong>QuartzCore Framework 与 CoreAnimation</strong>
正如Apple官方文档对<a href="https://developer.apple.com/library/mac/documentation/GraphicsImaging/Reference/QuartzCoreRefCollection/">Quarz Core Framework</a>的介绍，它提供了图形处理和视频图像处理的能力。简单来说就是：QuartzCore Framework负责把图形图像最终显示到屏幕上，这里我觉得应该是特指CoreAnimation。不要从字面上去理解CoreAnimation的职责，因为它的核心工作不单是负责动画的创建和执行，它还负责把我们用代码构建的界面显示到屏幕上，实际上是OpenGLES做的。（别急，虽然这里面的机理很复杂，但是在后面会提到）。<em>CALayer当然是属于QuarzCore Framework下的CoreAnimation</em></p></li>
<li><p><strong>CoreGraphics Framework</strong>
如Apple官方文档对<a href="https://developer.apple.com/library/prerelease/ios/documentation/CoreGraphics/Reference/CoreGraphics_Framework/index.html">Core Graphics Framework</a>的介绍。CoreGraphics Framework一个基于C库函数的高级绘画引擎，它提供了非常强大的轻量级2D渲染能力。可以使用CoreGraphics处理基于path的绘图工作(如，CGPath)、变形操作(如，CGAffineTransform)、颜色管理(如，CGColor)、离屏渲染(如，CGBitmapContextCreateImage)、渲染模式(patterns)、渐变(gradients)、阴影效果、图形数据管理、图形创建、蒙版以及PDF文档的创建、显示和解析。
<strong>千万别和QuartzCore混淆，CoreGraphics负责创建显示到屏幕上的数据模型，QuartzCore(CoreAnimation &ndash;> OpenGLES)负责把CoreGraphics创建的数据模型真正显示到屏幕上。</strong> <em>CG打头的类都是属于CoreGraphics Framework</em></p></li>
<li><p><strong>以上三者的关系</strong>
三者的关系是通过界面展示以及动画的创建和执行关联起来的，所以它们之间<strong>是协作而不是从属的关系</strong>。在接下来的部分我会从几个方面来阐述以上几个Framework是怎样游游走与UIView与CALayer之间的。</p></li>
</ul>


<h2>正文</h2>

<p>UIView与CALayer-界面渲染(Rendering)</p>

<p><img src="https://raw.githubusercontent.com/Handy-Wang/Handy-Wang.github.io/source/source/_posts/img/uiview_rendering_process.jpg" title="UIView的显示流程图" alt="UIView的显示流程图" /></p>

<p>如图所示，RunLoop/CALayer/UIView之间的协作流程就非常清楚了。下面按图中步骤对流程作下讲解：</p>

<ol>
<li>目前，我通过代码跟踪总结了两种触发界面渲染的情况

<ol>
<li><p>通过在loadView过程中debug子view的drawRect:方法得知：RunLoop处于kCFRunLoopBeforeWaiting状态时会触发CoreAnimation监听的kCFRunLoopBeforeWaiting的observer，从而通过observer回调来调用CoreAnimation内部的CA::Transaction::commit() ();方法，进而一步一步的调用drawRect方法。</p>

<pre><code> 调用流程是：由下至上
 Triggered by BeforeWaiting Observer Callback

 #0  0x00000001055825d0 in -[DMQView drawRect:] at /Users/xiaoshan/Home/iOS/SoucesCode/DispatchMainQueue/DispatchMainQueue/DMQView.m:16
 #1  0x0000000106471f08 in -[UIView(CALayerDelegate) drawLayer:inContext:] ()
 #2  0x0000000109f7c183 in -[CALayer drawInContext:] ()
 #3  0x0000000109e7133d in CABackingStoreUpdate_ ()
 #4  0x0000000109f7c002 in ___ZN2CA5Layer8display_Ev_block_invoke ()
 #5  0x0000000109f7be80 in CA::Layer::display_() ()
 #6  0x0000000109f70c69 in CA::Layer::display_if_needed(CA::Transaction*) ()
 #7  0x0000000109f70cf9 in CA::Layer::layout_and_display_if_needed(CA::Transaction*) ()
 #8  0x0000000109f65475 in CA::Context::commit_transaction(CA::Transaction*) ()
 #9  0x0000000109f92c0a in CA::Transaction::commit() ()

 #10 0x0000000109f9337c in CA::Transaction::observer_callback(__CFRunLoopObserver*, unsigned long, void*) ()
 #11 0x0000000105f39367 in __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ ()
 #12 0x0000000105f392d7 in __CFRunLoopDoObservers ()
 #13 0x0000000105f2ef2b in __CFRunLoopRun ()
 #14 0x0000000105f2e828 in CFRunLoopRunSpecific ()
 #15 0x0000000109806ad2 in GSEventRunModal ()
 #16 0x00000001063bb610 in UIApplicationMain ()
 #17 0x00000001055828ef in main at /Users/xiaoshan/Home/iOS/SoucesCode/DispatchMainQueue/DispatchMainQueue/main.m:14
 #18 0x000000010876192d in start ()
</code></pre></li>
<li><p>通过在VC里添加一个按钮的点击事件并在事件对应的selector中修改子view的背景色，debug子view的drawRect:方法得知：RunLoop被iOS系统传递来的点击事件唤醒并由source1处理(<em>_IOHIDEventSystemClientQueueCallback)，并且进一步由在下一个runloop里的source0转发给UIApplication(</em>UIApplicationHandleEventQueue)，从而能过source0里的事件队列来调用CoreAnimation内部的CA::Transaction::commit() ();方法，进而一步一步的调用drawRect方法。</p>

<pre><code> 调用流程是：由下至上
 Triggered by Source1 [Click Event] -&gt; Source0

 #0  0x00000001055825d0 in -[DMQView drawRect:] at /Users/xiaoshan/Home/iOS/SoucesCode/DispatchMainQueue/DispatchMainQueue/DMQView.m:16
 #1  0x0000000106471f08 in -[UIView(CALayerDelegate) drawLayer:inContext:] ()
 #2  0x0000000109f7c183 in -[CALayer drawInContext:] ()
 #3  0x0000000109e7133d in CABackingStoreUpdate_ ()
 #4  0x0000000109f7c002 in ___ZN2CA5Layer8display_Ev_block_invoke ()
 #5  0x0000000109f7be80 in CA::Layer::display_() ()
 #6  0x0000000109f70c69 in CA::Layer::display_if_needed(CA::Transaction*) ()
 #7  0x0000000109f70cf9 in CA::Layer::layout_and_display_if_needed(CA::Transaction*) ()
 #8  0x0000000109f65475 in CA::Context::commit_transaction(CA::Transaction*) ()
 #9  0x0000000109f92c0a in CA::Transaction::commit() ()

 #10 0x00000001063b5f7c in _UIApplicationHandleEventQueue ()
 #11 0x0000000105f39a31 in __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ ()
 #12 0x0000000105f2f95c in __CFRunLoopDoSources0 ()
 #13 0x0000000105f2ee13 in __CFRunLoopRun ()
 #14 0x0000000105f2e828 in CFRunLoopRunSpecific ()
 #15 0x0000000109806ad2 in GSEventRunModal ()
 #16 0x00000001063bb610 in UIApplicationMain ()
 #17 0x00000001055828ef in main at /Users/xiaoshan/Home/iOS/SoucesCode/DispatchMainQueue/DispatchMainQueue/main.m:14
 #18 0x000000010876192d in start ()
</code></pre></li>
<li>可见，上面两种情况都是触发CoreAnimation的CA::Transaction::commit() ();方法来达到触发CALayer/UIView的渲染，所以这个CA::Transaction机制很关键。</li>
</ol>
</li>
<li><p>其实一步已经进入到了Quarz Core的内部(Core Animation)，即调用CA::Transaction::commit() ();来创建CATrasaction，然后进一步调用-[CALayer drawInContext:] ()</p>

<pre><code> #2  0x0000000109f7c183 in -[CALayer drawInContext:] ()
 #3  0x0000000109e7133d in CABackingStoreUpdate_ ()
 #4  0x0000000109f7c002 in ___ZN2CA5Layer8display_Ev_block_invoke ()
 #5  0x0000000109f7be80 in CA::Layer::display_() ()
 #6  0x0000000109f70c69 in CA::Layer::display_if_needed(CA::Transaction*) ()
 #7  0x0000000109f70cf9 in CA::Layer::layout_and_display_if_needed(CA::Transaction*) ()
 #8  0x0000000109f65475 in CA::Context::commit_transaction(CA::Transaction*) ()
 #9  0x0000000109f92c0a in CA::Transaction::commit() ()
</code></pre></li>
<li>回调CALayer的Delegate(UIView)，问UIView没有需要画的的内容，即回调到drawRect:方法。</li>
<li>在drawRect:方法里可以通过CoreGraphics函数或UIKit中对CoreGraphics封装的方法进行画图操作，这些画图的操作内容都是以Off-Screen离屏(广义的离屏，因为没有在GPU中进行)方式进行画图。<a href="http://objccn.io/issue-3-1/">在这里</a>可以了解离屏绘图及CPU/GPU的工作。 另，注意图中虚线部分的3|4步骤的情况：因为CALayer可以单独存在进行界面渲染，所以CALayer也可以直接操作CoreGraphics。</li>
<li>无论是有UIView参与的或是直接采用CALayer渲染的操作都会体现在CALayer上(在没有CoreGraphics参与的情况下，UIView或CALayer本身也有一些在业务层面需要显示的内容，所以这里说的“体现在CALayer上”，是泛指UIView或CALayer的子视图子图层以及CoreGraphics参与的内容)。</li>
<li>CoreAnimation(CALayer)把它的内容转成位图(纹理)，然后通过OpenGL ES把位图内容传送到GPU的帧缓冲区。</li>
<li>等到由iOS显示屏时钟信号驱动的VSync信号来临时，则把GPU帧缓冲区里的内容显示到iOS显示屏上。<a href="http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=400417748&amp;idx=1&amp;sn=0c5f6747dd192c5a0eea32bb4650c160&amp;scene=4#wechat_redirect">在这里</a>的<strong>iOS 渲染过程</strong>一节可以了解得更详细。</li>
</ol>


<p>以上内容就是本章的全部内容，欢迎邮件到nnnwjs@126.com讨论。</p>

<h2>参考</h2>

<ul>
<li>Getting Pixels onto the Screen   <a href="https://www.objc.io/issues/3-views/moving-pixels-onto-the-screen/">英文</a>   |   <a href="http://objccn.io/issue-3-1/">中文</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=400417748&amp;idx=1&amp;sn=0c5f6747dd192c5a0eea32bb4650c160&amp;scene=4#wechat_redirect">iOS 事件处理机制与图像渲染过程</a></li>
<li><a href="https://github.com/ming1016/study/wiki/CFRunLoop">CFRunLoop</a></li>
<li><a href="http://blog.ibireme.com/2015/05/18/runloop/">深入理解RunLoop</a></li>
<li><a href="http://objccn.io/issue-2-4/">线程安全类的设计</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Runtime之Message转发浅析]]></title>
    <link href="http://blog.handy.wang/blog/2014/03/10/runtime-1rd-message/"/>
    <updated>2014-03-10T15:52:57+08:00</updated>
    <id>http://blog.handy.wang/blog/2014/03/10/runtime-1rd-message</id>
    <content type="html"><![CDATA[<!--more-->




<h3>Objective-C对象模型</h3>


<p>本文假定您对Objective-C对象模型已了解</p>

<p><img class="<a" src="href="https://raw.github.com/Handy-Wang/Handy-Wang.github.io/source/source/_posts/class-diagram.jpg">https://raw.github.com/Handy-Wang/Handy-Wang.github.io/source/source/_posts/class-diagram.jpg</a>" width="350" height="450"></p>

<h3>消息转发两大流程</h3>


<h6>一）方法的动态决议</h6>


<h6>二）完整的消息转发机制</h6>




<h3>一）方法的动态决议</h3>


<p>即程序运行时动态提供方法的实现，运行时是没有方法实现的。这一机制与消息机制不冲突，即发送消息后，如果运行时发现接收者没有消息实现，
则会触发方法<br/>
+(BOOL)resolveInstanceMethod:(SEL)sel; 和 +(BOOL)resolveClassMethod:(SEL)sel;<br/>
以拦截需要"动态决议"的方法，显而易见的是这两个方法分别对应实例方法和类方法的调用拦截。</p>

<p>针对“动态决议“的“运行时是没有方法实现”这一特性，我总结了两类动态决议的实际场景：<br/>
1）@dynamic<br/>
与@synthesis一样用于修饰属性，但@synthesis用于生成确实名称的getter、setter方法（如果@property中没有特殊指定getter、setter方法名）；@dynamic则是告诉编译器此属性的getter、setter方法的实现在运行时动态指定。<br/>
2）调用没有实现的实例方法或静态方法<br/>
因为运行时消息接收者是没有方法实现的，所以在运行时上面提到的两个方法<br />
(+(BOOL)resolveInstanceMethod:(SEL)sel; 和 +(BOOL)resolveClassMethod:(SEL)sel;)一定能被触发。</p>

<p>重点总结：<br/>
1）一定是被调用方法（静态方法和实例方法）的实现在运行时不存在，则“方法的动态决议机制”才有效，否则无效<br />
2）属性方法的动态决议体现在：@dynamic修饰属性以及配合方法 +(BOOL)resolveInstanceMethod:(SEL)sel; 来指定方法的实现<br />
3）通过runtime相关函数提供方法的动态实现时，如果方法实现有返回值，那么返回值必须是对象类型不能为基本数据类型(通过代码实验证明)<br /></p>

<p>知识扩展<br />
使用runtime相关函数在运行时添加静态和实例方法实现时，发现一些小知识点。<br />
1）实例对象、类、类对象、元类对象、相关方法</p>

<pre><code>实例对象 instance object, 通过Frameworks里的类(或自己定义的类)实例化得到的对象叫实例对象，
    如:AboutMethods *am = [[[AboutMethods alloc] init]]; am就是实例对象。实例对象的isa指向其类对象。

类 class，定义用于抽象一类事物的数据结构

类对象 class object, 在Objective-C中任何的类定义都是对象。
    即在程序启动的时候任何类定义都对应于一块内存。
    在编译的时候，编译器会给每一个类生成一个且只生成一个”描述其定义的对象”,
    也就是Apple说的类对象(class object), 它是一个单例(singleton)。
    官方文档中是这样说的： The class object is the compiled version of the class
    类对象(class object)中存储了关于实例对象(instace object)所属的类的定义的
    一切：包括变量，方法，遵守的协议等等

元类对象 metaclass object, 实际上，类对象是元类对象的一个实例。
    元类对象描述了一个类对象，就像类对象描述了普通对象一样。
    不同的是元类对象的方法列表是类方法的集合，由类对象的选择器来响应。
    当向一个类发送消息时，objc_msgSend会通过类对象的isa指针定位到元类对象，
    并检查元类的方法列表（包括父类）来决定调用哪个方法。元类对象代替了类对象描述了类方法，
    就像类对象代替了实例对象描述了实例方法

类对象和元类对象的相关方法
    1. object_getClass 跟随对象的isa指针，返回此对象所属的类，对于实例对象(instance object)返回
        的是类对象(class object),
        对于类对象(class object)则返回的是元类对象(metaclass object),
    2. -class方法对于实例对象(instance)会返回类对象(class object), 对于类对象(class object)有方法+class
        则不会返回元类(metaclass object), 而只会返回类对象本身,即[@"instance" class]返回的是
        __NSCFConstantString, 而[NSString class]返回的是NSString。
        注：类名出现在消息表达式([])中作为消息接收者时表示类对象class object.
    3. class_isMetaClass 可判断某类是否为元类.                                     
    4. 使用objc_allocateClassPair可在运行时创建新的类与元类对，使用class_addMethod和
        class_addIvar可向类中增加方法和实例变量,
        最后使用objc_registerClassPair注册后，就可以使用此类了。
</code></pre>

<p>2）self、[self class]、[[self class] class]、[类名 class]、[[类名 class] class]、objc_getMetaClass[&lsquo;类名&rsquo;]、self->isa、[类名 class]&ndash;>isa、self->isa->isa的区别：</p>

<pre><code>要区分它们之前，首先要考虑调用它们的上下文：实例方法里和静态方法里， 以下分析假设有一个类名为AboutMethods
    如果是静态方法里调用：
        1.self 即类对象class object
        2.[self class] self表示类对象,从上面相关知识中了解到[类对象 class]还是返回类对象
        3.[[self class] class]、[类名 class]、[[类名 class] class] 如2.分析，
            都是获取类对象class object
        4.objc_getMetaClass["类名"] 从这个runtime函数名上即可知道这是获取类的metaclass，
            即元类对象metaclass object
            如：objc_getMetaClass("AboutMethods") 返回的是AboutMethods类的元类对象metaclass object
        5. self-&gt;isa、[类名 class]-&gt;isa 如前面所述，self、[xxx class]都是返回类对象class object，
            那么类对象的isa就是元类对象metaclass object
        6. self-&gt;isa-&gt;isa 因为self-&gt;isa是metaclass object，根据OC对象模式图知self-&gt;isa-&gt;isa是
            root metaclass object, 即NSOjbect的metaclass
    如果是实例方法里调用：
        1.self 指实例对象
        2.[self class] 指类对象
        3.[[self class] class]、[类名 class]、[[类名 class] class] 同静态方法里，都是获取类对象
        4.objc_getMetaClass["类名"] 同静态方法里，即获取元类对象metaclass object
        5. self-&gt;isa 由于self是实例对象instance object，所以self-&gt;isa获取的是类对象class object
        6. [类名 class]-&gt;isa 由于[类名 class]获取的是类对象class object,
                所以[类名 class]-&gt;isa获取到的是元类对象metaclass object.
        7. self-&gt;isa-&gt;isa 由于self是实例对象，所以self-&gt;isa表示类对象
                那么self-&gt;isa-&gt;isa表示是元类对象
        8. 注：在实例对象上直接调用isa已经被抛弃了，建议用object_getClass()函数
</code></pre>

<p>疑问：<br />
1）实例对象的创建过程？<br /></p>

<pre><code>类的编译过程、对象的创建过程，编译时与运行时的关系
</code></pre>

<p>2）类对象、元类对象的创建过程？</p>

<h3>二）完整的消息转发机制</h3>


<p>在运行时向消息接受者发送消息，消息接受者在收到消息请求后会从自己的类对象、父类对象中的method_list链表中查询消息实现的地址入口IMP。
如果在这些地方都没有找到发送的消息实现的地址入口，则rumtime运行时环境会向消息接收者发送一个forwardInvocation:消息，
并且把原始的消息以及消息的参数打成一个NSInvocation的一个对象里面，作为forwardInvocation:的唯一的参数。
forwardInvocation:本身是在NSObject里面定义的，如果你需要重载这个方法的话，那么任何试图向你的类发送一个没有定义的消息的话，
你都可以在forwardInvocation:里面捕捉到，并且把消息送到某一个安全的地方，从而避免了系统报错。</p>

<p>注意：<br />
1）重载 &ndash; (void)forwardInvocation:(NSInvocation <em>)anInvocation;的同时需要重载方法 &ndash; (NSMethodSignature </em>)methodSignatureForSelector:(SEL)sel;</p>

<pre><code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)sel {
    NSLog(@"///////%@", NSStringFromSelector(_cmd));
    NSMethodSignature *sig = [_sub methodSignatureForSelector:sel];
    return sig;
}

- (void)forwardInvocation:(NSInvocation *)anInvocation {
    NSLog(@"///////%@", NSStringFromSelector(_cmd));
    [anInvocation invokeWithTarget:_sub];
}
</code></pre>

<h3>参考</h3>


<p><a href="http://www.cnblogs.com/yaski/archive/2009/04/13/1434308.html">http://www.cnblogs.com/yaski/archive/2009/04/13/1434308.html</a>
<a href="http://www.cnblogs.com/liufeng24/p/3561852.html">http://www.cnblogs.com/liufeng24/p/3561852.html</a>
<a href="http://blog.csdn.net/wzzvictory/article/details/8592492">http://blog.csdn.net/wzzvictory/article/details/8592492</a>
<a href="http://blog.devtang.com/blog/2013/10/15/objective-c-object-model/">http://blog.devtang.com/blog/2013/10/15/objective-c-object-model/</a></p>
]]></content>
  </entry>
  
</feed>
